initSidebarItems({"enum":[["ErrorKind","A list specifying general categories of I/O error.This list is intended to grow over time and it is not recommended to exhaustively match against it."]],"struct":[["Error","The error type for I/O operations of the `Read`, `Write`, `Seek`, and associated traits.Errors mostly originate from the underlying OS, but custom instances of `Error` can be created with crafted error messages and a particular value of `ErrorKind`."]],"trait":[["Evented","A value that may be registered with an `EventLoop`"],["Read","The `Read` trait allows for reading bytes from a source.Implementors of the `Read` trait are sometimes called 'readers'.Readers are defined by one required method, `read()`. Each call to `read` will attempt to pull bytes from this source into a provided buffer. A number of other methods are implemented in terms of `read()`, giving implementors a number of ways to read bytes while only needing to implement a single method.Readers are intended to be composable with one another. Many implementors throughout `std::io` take and provide types which implement the `Read` trait.Please note that each call to `read` may involve a system call, and therefore, using something that implements `BufRead`, such as `BufReader`, will be more efficient.Examples`File`s implement `Read`:"],["TryAccept",""],["TryRead",""],["TryWrite",""],["Write","A trait for objects which are byte-oriented sinks.Implementors of the `Write` trait are sometimes called 'writers'.Writers are defined by two required methods, `write()` and `flush()`:The `write()` method will attempt to write some data into the object, returning how many bytes were successfully written.The `flush()` method is useful for adaptors and explicit buffers themselves for ensuring that all buffered data has been pushed out to the 'true sink'.Writers are intended to be composable with one another. Many implementors throughout `std::io` take and provide types which implement the `Write` trait.Examples"]],"type":[["Result",""]]});