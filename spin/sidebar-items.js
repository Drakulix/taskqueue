initSidebarItems({"struct":[["Mutex","This type provides MUTual EXclusion based on spinning.DescriptionThis structure behaves a lot like a normal Mutex. There are some differences:It may be used outside the runtime. A normal mutex will fail when used without the runtime, this will just lock When the runtime is present, it will call the deschedule function when appropriate No lock poisoning. When a fail occurs when the lock is held, no guarantees are made When calling rust functions from bare threads, such as C `pthread`s, this lock will be very helpful. In other cases however, you are encouraged to use the locks from the standard library.Simple exampleThread-safety example"],["MutexGuard","A guard to which the protected data can be accessedWhen the guard falls out of scope it will release the lock."],["RwLock","A reader-writer lockThis type of lock allows a number of readers or at most one writer at any point in time. The write portion of this lock typically allows modification of the underlying data (exclusive access) and the read portion of this lock typically allows for read-only access (shared access).The type parameter `T` represents the data that this lock protects. It is required that `T` satisfies `Send` to be shared across tasks and `Sync` to allow concurrent access through readers. The RAII guards returned from the locking methods implement `Deref` (and `DerefMut` for the `write` methods) to allow access to the contained of the lock.Based on https://jfdube.wordpress.com/2014/01/03/implementing-a-recursive-read-write-spinlock/"],["RwLockReadGuard","A guard to which the protected data can be readWhen the guard falls out of scope it will decrement the read count, potentially releasing the lock."],["RwLockWriteGuard","A guard to which the protected data can be writtenWhen the guard falls out of scope it will release the lock."]]});