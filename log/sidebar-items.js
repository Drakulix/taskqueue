initSidebarItems({"enum":[["LogLevel","An enum representing the available verbosity levels of the logging frameworkA `LogLevel` may be compared directly to a `LogLevelFilter`."],["LogLevelFilter","An enum representing the available verbosity level filters of the logging framework.A `LogLevelFilter` may be compared directly to a `LogLevel`."]],"fn":[["max_log_level","Returns the current maximum log level.The `log!`, `error!`, `warn!`, `info!`, `debug!`, and `trace!` macros check this value and discard any message logged at a higher level. The maximum log level is set by the `MaxLogLevel` token passed to loggers."],["set_logger","Sets the global logger.The `make_logger` closure is passed a `MaxLogLevel` object, which the logger should use to keep the global maximum log level in sync with the highest log level that the logger will not ignore.This function may only be called once in the lifetime of a program. Any log events that occur before the call to `set_logger` completes will be ignored.This function does not typically need to be called manually. Logger implementations should provide an initialization method that calls `set_logger` internally.Requires the `use_std` feature (enabled by default)."],["set_logger_raw","Sets the global logger from a raw pointer.This function is similar to `set_logger` except that it is usable in `no_std` code. Another difference is that the logger is not automatically shut down on program exit, and `shutdown_logger_raw` must be called to manually shut it down.The `make_logger` closure is passed a `MaxLogLevel` object, which the logger should use to keep the global maximum log level in sync with the highest log level that the logger will not ignore.This function may only be called once in the lifetime of a program. Any log events that occur before the call to `set_logger_raw` completes will be ignored.This function does not typically need to be called manually. Logger implementations should provide an initialization method that calls `set_logger_raw` internally.SafetyThe pointer returned by `make_logger` must remain valid for the entire duration of the program or until `shutdown_logger_raw` is called."],["shutdown_logger_raw","Shuts down the global logger.This function may only be called once in the lifetime of a program, and may not be called before `set_logger_raw`. Once the global logger has been shut down, it can no longer be re-initialized by `set_logger_raw`. Any log events that occur after the call to `shutdown_logger_raw` completes will be ignored.The pointer that was originally passed to `set_logger_raw` is returned on success. At that point it is guaranteed that no other threads are concurrently accessing the logger object.This function should not be called when the global logger was registered using `set_logger`, since in that case the logger will automatically be shut down when the program exits"]],"macro":[["debug!","Logs a message at the debug level.Logging at this level is disabled if any of the following features are present: `max_level_off`, `max_level_error`, `max_level_warn`, or `max_level_info`.When building in release mode (i.e., without the `debug_assertions` option), logging at this level is also disabled if any of the following features are present: `release_max_level_off`, `release_max_level_error`, `release_max_level_warn`, or `release_max_level_info`."],["error!","Logs a message at the error level.Logging at this level is disabled if the `max_level_off` feature is present."],["info!","Logs a message at the info level.Logging at this level is disabled if any of the following features are present: `max_level_off`, `max_level_error`, or `max_level_warn`.When building in release mode (i.e., without the `debug_assertions` option), logging at this level is also disabled if any of the following features are present: `release_max_level_off`, `release_max_level_error`, or `release_max_level_warn`."],["log!","The standard logging macro.This macro will generically log with the specified `LogLevel` and `format!` based argument list.The `max_level_*` features can be used to statically disable logging at various levels."],["log_enabled!","Determines if a message logged at the specified level in that module will be logged.This can be used to avoid expensive computation of log message arguments if the message would be ignored anyway.Examples"],["trace!","Logs a message at the trace level.Logging at this level is disabled if any of the following features are present: `max_level_off`, `max_level_error`, `max_level_warn`, `max_level_info`, or `max_level_debug`.When building in release mode (i.e., without the `debug_assertions` option), logging at this level is also disabled if any of the following features are present: `release_max_level_off`, `release_max_level_error`, `release_max_level_warn`, `release_max_level_info`, or `release_max_level_debug`."],["warn!","Logs a message at the warn level.Logging at this level is disabled if any of the following features are present: `max_level_off` or `max_level_error`.When building in release mode (i.e., without the `debug_assertions` option), logging at this level is also disabled if any of the following features are present: `release_max_level_off` or `max_level_error`."]],"struct":[["LogLocation","The location of a log message.WarningThe fields of this struct are public so that they may be initialized by the `log!` macro. They are subject to change at any time and should never be accessed directly."],["LogMetadata","Metadata about a log message."],["LogRecord","The \"payload\" of a log message."],["MaxLogLevelFilter","A token providing read and write access to the global maximum log level filter.The maximum log level is used as an optimization to avoid evaluating log messages that will be ignored by the logger. Any message with a level higher than the maximum log level filter will be ignored. A logger should make sure to keep the maximum log level filter in sync with its current configuration."],["SetLoggerError","The type returned by `set_logger` if `set_logger` has already been called."],["ShutdownLoggerError","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet."]],"trait":[["Log","A trait encapsulating the operations required of a logger"]]});