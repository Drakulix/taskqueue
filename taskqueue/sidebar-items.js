initSidebarItems({"enum":[["LoopResult","Helper struct for `Queue::loop_while`Inside your loop body return either `Continue` to let your loop continue running or return `Done` with the return value, that shall be observable through the FutureGuard `loop_while` returns."]],"fn":[["init_main","Convert the main thread into a SerialQueueThis function warps the current thread into a SerialQueue, that is passed to the executed function, blocking the current thread until the created Queue is done.This function is only intended to be used on the main thread and library creators should never need to use it.If you need a queue based on a newly created OS thread use `SerialQueue::new_native()`.Example"]],"mod":[["extensions","Helpers for existing `std` traits utilizing TaskQueue"],["io","IO module providing a queue-compatible mostly std-like replacement for native blocking IO. Provided through mioco and mio. Other types implementing mio's Evented Trait might be used aswell through io::mio::MioAdapter.With queues executing on a thread pool, normal blocking IO is not working anymore. Anything blocking may block multiple queues at once causing a deadlock or starvation.In cases where blocking IO cannot be avoided, a solution is provided through `SerialQueue::new_native()`."]],"struct":[["BoundSerialQueue","A bound SerialQueue holding a queue-bound variableCreate a BoundSerialQueue using `SerialQueue::with`. BoundSerialQueue's hold variables that may be used through tasks executed on this queue though `scoped_with`, `sync_with` `foreach_with` or `loop_while_with`.`async_with` cannot be provided, as the bound variable is dropped, when the BoundSerialQueue gets dropped.Internally BoundSerialQueue refer to the same queue, they were created from. Multiple BoundSerialQueue's may exist for one queue at once."],["ConcurrentQueue","Queue executing tasks in parallelPropertiesexecutes a new task as soon as possible on the next thread tasks may overlap tasks may execute on totally different threads safety against deadlocks from recursive queueing (see SerialQueue example) This disallows type binding but enables very easy parallization where appropriate.Example"],["Future","Future holding the variable of a maybe to be executed task"],["FutureGuard","Future holding the variable of a maybe to be executed task. Guards the Task and waits for it on Drop."],["Group","Group provides a way to synchronize multiple TasksUsing Group you can block on multiple tasks at once or handle them in order across multiple queues."],["SerialQueue","Queue executing Tasks serially, non-overlapping in queued OrderPropertiesexecutes tasks in serial order no tasks may overlap they never change their native background thread (but may share it) the tasks are executed in order of queuing safety against deadlocks from recursive queueing (see example) Through these guarantees SerialQueues may bound to a type that is **not** Send or Sync and provide easy thread safe access to this critcal resource. Such a SerialQueue is called *BoundSerialQueue*.Example"]],"trait":[["Queue","Basic Queue Trait defining all possible operations on QueuesQueues implement this, so you may use a unified Interface for all Queues."]]});